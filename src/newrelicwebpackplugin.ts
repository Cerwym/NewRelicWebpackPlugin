// Import here Polyfills if needed. Recommended core-js (npm i -D core-js)
  // import "core-js/fn/array.find"
  // ...

import { Compilation, Compiler, Stats, StatsAsset } from 'webpack';
import * as fs from 'fs'

export interface Options {
  verbose: boolean
}

type TAssetPrependType = {
  source: string | Buffer;
  filename: string
}

const pluginName = 'cerwym-newrelic-webpack-plugin';

class NewrelicWebpackPlugin {
  private readonly verbose: boolean;
  private outputPath: string;

  private assetsToPrepend: TAssetPrependType[] = []

  constructor(options: Options = {verbose: true}) {
    this.verbose = options.verbose;
    this.outputPath = '';

    this.apply = this.apply.bind(this);
    this.handleEmit = this.handleEmit.bind(this)
    this.handleDone = this.handleDone.bind(this);
  }

  apply(compiler: Compiler) {
    if (!compiler.options.output || !compiler.options.output.path) {
      this.log('options.output.path not defined. Plugin disabled...')

      return;
    }

    this.log('Loaded')

    this.outputPath = compiler.options.output.path;

    const hooks = compiler.hooks;

    hooks.emit.tapAsync(pluginName, (compilation, cb) => {
      this.handleEmit(compilation, cb);
    })

    hooks.done.tap(pluginName, stats => {
      this.handleDone(stats);
    });

    // compiler.hooks.done.tap(pluginName, appendNewrelicToJsAssets);
  }

  handleEmit(compilation: Compilation, afterEmitCb: Function) {
// Explore each chunk (build output):
    compilation.chunks.forEach((chunk) => {
      // Explore each asset filename generated by the chunk:
      chunk.files.forEach((filename) => {
        if (filename.endsWith('.js')) {
          let source = compilation.assets[filename].source();
          this.assetsToPrepend.push({source, filename})
        }
      });
    });

    afterEmitCb();
  }

  handleDone(stats: Stats) {
    if (!stats.compilation.assets) {
      this.log('No Compilation Assets exist')
      return;
    }
    if (!this.assetsToPrepend.length) {
      this.log('No Emitted JS files exist to prepend')
      return;
    }

    for (const asset of this.assetsToPrepend) {
      const newSource = "require('newrelic');" + asset.source;

      fs.writeFile(`${this.outputPath}/${asset.filename}`, newSource, (err) => {
        if(err) throw err;
        this.log(`Adding agent to top of file : ${asset.filename}`)
      })
    }
  }

  log(message: string) {
    if (this.verbose) {
      console.log(
        `${pluginName} : ${message}`,
      );
    }
  }
}

export {NewrelicWebpackPlugin}
